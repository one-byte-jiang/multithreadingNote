====并发基础=====

（单核情况下做出乱序优化并没啥影响，多核并发情况下就会出现问题）

1.CPU多级缓存-乱序执行优化

例如：a=10----->b=200----->result=2000

在CPU乱序执行优化的时候可能会变成以下执行顺序：

例如：b=200----->a=10----->result=2000

计算过程虽然不会对结果造成影响，如何是多核同时运行就会出现与预期结果不同的概率


2.JAVA内存模型（简称:JMM）

变量存放在栈  对象是存放在堆

3.并发的优势与风险
优势
①.提高的程序的效率，同时处理多个请求，响应更快。
②.资源利用，CPU等待IO可以做其他的事情
风险
①多个线程争夺共享数据时，会产生与期望不符的结果
②某个操作无法继续进行下去，就会出现死锁、饥饿等问题   （注:考虑安全性,会对线程加锁，如果对加锁解锁操作不当，就会引发死锁的情况）
③线程过多使用，CPU负荷增大，内存也会随之消耗



====线程安全性=====
1.保证线程安全的手段

原子性:提供了互斥访问,同一时刻只能有一个线程来对它进行操作

可见性:一个线程对主内存的修改可以及时的被其他线程观察到

有序性:一个线程观察其他线程中的指令执行顺序，由于指令 重排序的存在，该观察结果一般杂乱无序

一、原子性--Atomic包  CAS 就是（compareAndSwap首字母的缩写命名）
注意（面试可能会问）:AtomicInteger使用了unsafe类

AtomicInteger实现原理：调用compareAndSwapInt方法 当前的值与从底层主内存取出来的值是预期相同的就进行相加计算，如果与预期的值不同，将会在死循环中阻塞等待

AtomicLong与LongAdder的区别：
上面说到的AtomicInteger的原理，如果与预期不符合就会死循环一直判断，如果其他线程对共享变量修改失败的情况下，AtomicInteger还是会死循环的比较，性能会受到影响
LongAdder是在AtomicLong的基础上，将单点的更新压力分散到各个节点上（在低并发情况下，通过单点更新和Atomic性能基本一致，在高并发的情况下，通过分散提高性能）

LongAdder的缺点：
在统计并发更新的时候，统计的数据会有些误差，在高并发计数情况下，优先使用LongAdder，低并发情况下使用AtomicLong还是比较简单方便，比如生成序列号全局唯一的数值，使用AtomicLong比较好

AtomicIntegerFieldUpdater的作用是，原子性的更新某一个类中某一个字段的值，而字段是必须用volatile修饰，同时不能是static字段

AtomicStampReference:CAS的ABA问题：
什么是ABA？CAS原子性操作的时候，其他线程将变量的值A改为B，但是又改回了A，本线程使用变量值A与主存的变量值比较的时候，发现A变量没有变，于是CAS就将值进行了交换操作。
AtomicStampReference其实就是对每次操作后面加上了版本。


二、原子性--锁
synchronized:依赖JVM（作用对象的作用范围内）,不可中断锁，适合竞争不激烈，可读性好
Lock:依赖特殊的CPU指令，代码实现，ReentrantLock；可中断锁，多样化同步，竞争激烈时能维持常态
Atomic:竞争激烈时能维持常态，比Lock性能好；只能同步一个值


一、可见性
1.volatile:通过加入【内容屏障】和【禁止重排序】优化来实现
对volatile变量写操作时，会在写操作后加入一条store屏障指令，将本地内存中的共享变量值刷新到主内存
对volatile变量读操作时，会在读操作前加入一条load屏障指令，从主内存中读取共享变量


一、有序性
happens-before原则
①程序次序规则：一个线程内，按照代码顺序，看起来是有序执行的，其实由于cpu指令重排序，那些没有顺序依赖的代码可能存在重排序
②锁定规则：一个unlock操作先行发生于后面对同一锁的lock操作（也就是说前一个线程没有释放锁，第二个线程是不能加锁的）
③volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作（也就是说一个线程写操作，一个线程读操作，肯定先写后读这样一个顺序）
④传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则操作A先行发生于操作C
后面还有四个原则，不一一列举了


  安全发布对象-可参考concurrencyday1-java/com/example/concurrencyday1-example-singleton-SingletonExample4  代码中注释的详解



ThreadLock：就是把共享变量复制一份到每个线程的本地变量，每个线程操作本地变量互不影响！
ThreadLock：原理其实就通过当前线程作为Map区分的key值


StringBuilder是线程不安全的类，StringBuffer是线程安全的类：因为StringBuffer的所有方法加了synchronized关键字的、


SimpleDateFormat高并发下，如果用作共享变量是线程不安全的

HashMap、ArrayList、HashSet都是线程不安全的！

对于一些集合，例如：Vector、ArrayList等增强for循环、迭代器遍历时进行删除或者添加元素会抛出异常，如果要删除的操作，遍历的时候做好标记，结束之后再去删除


====线程安全-并发容器J.U.C=====
CopyOnWriteArrayList：优点，读写是分离的，写的花会单独开辟新的数组上，也会保证最终一致性。缺点：如果频繁的添加，会导致内存占用开销
注意：add、remove操作是线程安全的，但是removeAll，addAll是线程不安全的。

ConcurrentHashMap与ConcurrentSkipListMap的区别：都是线程安全的。ConcurrentSkipListMap是有序的。而且并发越高ConcurrentSkipListMap优势越大